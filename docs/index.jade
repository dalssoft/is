doctype
html(lang='en')
  head
    meta(charset='UTF-8')
    title is.js
    meta(name='generator' content='Bootply')
    meta(name='viewport', content='width=device-width, initial-scale=1, maximum-scale=1')
    link(rel='stylesheet', href='http://netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css')
    style(type='text/css').
      @import url(http://fonts.googleapis.com/css?family=Droid+Sans+Mono);

      html,body {
        height: 100%;
        font-family: 'Droid Sans Mono', sans-serif;
      }

      p,h1,h2,h3,h4 {
        font-family: 'Droid Sans Mono', sans-serif;
      }

      hr {
        border-color:#191919;
      }

      /* wrapper for page content to push down footer */
      .page-container {
        min-height: 100%;
        height: auto !important;
        height: 100%;
        /* negative indent footer by its height*/
        margin: 0 auto -120px;
        /*pad bottom by footer height */
        padding: 0 0 70px;
      }

      /* set the fixed height of the footer here */
      #footer {
        border: none;
        font-weight: 100;
        font-family: 'Droid Sans Mono', sans-serif;
        width: 500px;
        background: none;
        color: #efefef;
      }

      body {
        padding-top: 51px; 
        background: #1E1E1E;
        color: #f9f9f9;
      }
      a, small {
        color:#bcbcbc;
      }
      .text-center {
        padding-top: 20px;
      }

      #main {
      }

      #sidebar {
        height: 100%;
        padding-right: 0;
        padding-bottom: 100px;
        position: fixed;
        left: 0;
        overflow: scroll;
      }

      #sidebar .affix {
        position:fixed;
        top:55;
        width:220px;
      }

      #sidebar .affix-bottom {
        position:fixed;
        top:55;
        width:220px;
      }

      #sidebar .nav {
        width: 95%;
      }
      #sidebar li {
        border:0 #1e1e1e solid;
        border-bottom-width:1px;
      }
      #sidebar li a {
        padding-left:1px;
      }
      #sidebar li a:hover {
        background-color:#222222;
        color:#ffffff;
      }

      /* collapsed sidebar styles */
      @media screen and (max-width: 767px) {
        .row-offcanvas {
          position: relative;
          -webkit-transition: all 0.25s ease-out;
          -moz-transition: all 0.25s ease-out;
          transition: all 0.25s ease-out;
        }
        .row-offcanvas-right
        .sidebar-offcanvas {
          right: -41.6%;
        }

        .row-offcanvas-left
        .sidebar-offcanvas {
          left: -41.6%;
        }
        .row-offcanvas-right.active {
          right: 41.6%;
        }
        .row-offcanvas-left.active {
          left: 41.6%;
        }
        .sidebar-offcanvas {
          position: absolute;
          top: 0;
          width: 41.6%;
        }
        #sidebar {
          padding-top:0;
        }
        #sidebar .nav>li {
          color: #ddd;
          background: linear-gradient(#3E3E3E, #383838);
          border-top: 1px solid #484848;
          border-bottom: 1px solid #2E2E2E;
          padding-left:10px;
        }
        #sidebar .nav>li:first-child {
          border-top:0;
        }
        #sidebar .nav>li>a {
          color: #ddd;
        }
        #sidebar .nav>li>a>img {
          max-width: 14px;
        }
        #sidebar .nav>li>a:hover, #sidebar .nav>li>a:focus {
          text-decoration: none;
          background: linear-gradient(#373737, #323232);
          color: #fff;  
        }
        #sidebar .nav .caret {
          border-top-color: #fff;
          border-bottom-color: #fff;
        }
        #sidebar .nav a:hover .caret{
          border-top-color: #fff;
          border-bottom-color: #fff;
        }
      }

      /* theme */
      .btn,.form-control,.alert,.progress,.panel,.list-group,.well,.list-group-item:first-child {border-radius:1px;box-shadow:0 0 0;}
      .btn {border-color:transparent;}
      .btn-default,.well {
        background-color:#cccccc;
        border-color:#c0c0c0;
      }
      .btn-primary,.label-primary,.list-group-item.active,.list-group-item.active:hover,.list-group-item.active:focus,.btn.active,a.list-group-item.active, a.list-group-item.active:hover, a.list-group-item.active:focus {
        background-color:#0099CC;
        border-color:transparent;
      }
      .btn-info,.label-info,.progress-bar-info {
        background-color:#33b5e5;
      }
      .btn-success,.label-success,.progress-bar-success {
        background-color:#669900;
      }
      .btn-danger,.label-danger,.progress-bar-danger {
        background-color:#FF4444;
      }
      .btn-warning,.label-warning,.progress-bar-warning {
        background-color:#FFBB33;
        color:#444444;
      }
      .nav-tabs>li>a {
        border-radius:0;
      }

      h3,h4,h5,.panel {
        color:#555555;
      }
      .panel hr {
        border-color:#efefef;
      }

      code {
        color: #58b;
      }
  body
    a(href='https://github.com/landau/is')
      img(style='z-index:99999;position: fixed; top: 0; right: 0; border: 0;', src='https://camo.githubusercontent.com/a6677b08c955af8400f44c6298f40e7d19cc5b2d/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f72696768745f677261795f3664366436642e706e67', alt='Fork me on GitHub', data-canonical-src='https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png')

    .page-container
      // top navbar
      .navbar.navbar-inverse.navbar-fixed-top(role='navigation')
        .navbar-header
          button.navbar-toggle(type='button', data-toggle='offcanvas', data-target='.sidebar-nav')
            span.icon-bar
            span.icon-bar
            span.icon-bar
          a.navbar-brand(href='') is.js 
            small v. 0.5.0
      .col-sm-12
        .row.row-offcanvas.row-offcanvas-left
          //- sidebar
          #sidebar.col-xs-6.col-sm-2.sidebar-offcanvas(role='navigation')
            div
              ul#sidebar-nav.nav
                li: a(href='#not') is.not
                li: a(href='#exists') is.exists
                li: a(href='#truthy') is.truthy
                li: a(href='#falsey') is.falsey
                li: a(href='#null') is.null
                li: a(href='#undef') is.undef
                li: a(href='#equal') is.equal
                li: a(href='#eq') is.eq
                li: a(href='#less') is.less
                li: a(href='#lessEq') is.lessEq
                li: a(href='#greater') is.greater
                li: a(href='#greaterEq') is.greaterEq
                li: a(href='#object') is.object
                li: a(href='#array') is.array
                li: a(href='#date') is.date
                li: a(href='#rgx') is.rgx
                li: a(href='#finite') is.finite
                li: a(href='#NaN') is.NaN
                li: a(href='#arguments') is.arguments
                li: a(href='#error') is.error
                li: a(href='#fn') is.fn
                li: a(href='#num') is.num
                li: a(href='#str') is.str
                li: a(href='#bool') is.bool
                li: a(href='#int') is.int
                li: a(href='#pos') is.pos
                li: a(href='#neg') is.neg
                li: a(href='#contains') is.contains
                li: a(href='#has') is.has
                li: a(href='#instance') is.instance
                li: a(href='#ternary') is.ternary
                li: a(href='#every') is.every
                li: a(href='#some') is.some

          //- main area
          #main.col-xs-12.col-sm-7.col-sm-offset-3
            .panel.panel-default
              a(name='not')
              .panel-heading
                h4 not
                  small: code is.not

              .panel-body
                :markdown
                  A complemented version of the `is` predicate functions.
                  All predicate functions are available in this namespace
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.null(null) // true
                    is.not.null(null) // false
                    ```
            .panel.panel-default
              a(name='exists')
              .panel-heading
                h4 exists
                  small: code is.exists(val)

              .panel-body
                :markdown
                  Returns true if a value is not `null` or `undefined`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.exists(null) // false
                    is.exists(false) // true
                    is.exists(0) // true
                    is.exists('javascript') // true
                    ```
            .panel.panel-default
              a(name='truthy')
              .panel-heading
                h4 truthy
                  small: code is.truthy(val)

              .panel-body
                :markdown
                  Returns true if a value `exists` and isn't `false`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.truthy(0) // true
                    is.truthy([1, 2]) // true
                    is.truthy(false) // false
                    is.truthy(null) // false
                    ```
            .panel.panel-default
              a(name='falsey')
              .panel-heading
                h4 falsey
                  small: code is.falsey(val)

              .panel-body
                :markdown
                  Returns true if a value is `false` or `doesn't exist`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.falsey(0) // false
                    is.falsey([1, 2]) // false
                    is.falsey(false) // true
                    is.falsey(null) // true
                    ```
            .panel.panel-default
              a(name='null')
              .panel-heading
                h4 null
                  small: code is.null(val)

              .panel-body
                :markdown
                  Returns true if a value is `null`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.null(null) // true
                    is.null(false) // false
                    is.null(undefined) // false
                    ```
            .panel.panel-default
              a(name='undef')
              .panel-heading
                h4 undef
                  small: code is.undef(val)

              .panel-body
                :markdown
                  Returns true if a value is `undefined`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.undef(undefined) // true
                    is.undef(null) // false
                    is.undef(false) // false
                    ```
            .panel.panel-default
              a(name='equal')
              .panel-heading
                h4 equal
                  small: code is.equal(a, b)

              .panel-body
                :markdown
                  Returns true if `a === b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.equal(1, 1) // true
                    is.equal('a', 'a') // true
                    is.equal(null, 1) // false
                    is.equal([1, 2], [1, 2]) // false
                    ```
            .panel.panel-default
              a(name='eq')
              .panel-heading
                h4 eq
                  small: code is.eq(a, b)

              .panel-body
                :markdown
                  Returns true if `a == b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.eq('1', 1) // true
                    is.eq('a', 'b') // false
                    ```
            .panel.panel-default
              a(name='less')
              .panel-heading
                h4 less
                  small: code is.less(a, b)
                small alias 
                  code is.lt(a, b)

              .panel-body
                :markdown
                  Returns true if `a < b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.less(1, 5) // true
                    is.less(5, 5) // false
                    is.less(5, 1) // false
                    ```
            .panel.panel-default
              a(name='lessEq')
              .panel-heading
                h4 lessEq
                  small: code is.lessEq(a, b)
                small alias 
                  code is.ltEq(a, b)

              .panel-body
                :markdown
                  Returns true if `a <= b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.lessEq(1, 5) // true
                    is.lessEq(5, 5) // true
                    is.lessEq(5, 1) // false
                    ```
            .panel.panel-default
              a(name='greater')
              .panel-heading
                h4 greater
                  small: code is.greater(a, b)
                small alias 
                  code is.gt(a, b)

              .panel-body
                :markdown
                  Returns true if `a > b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.greater(5, 1) // true
                    is.greater(5, 5) // false
                    is.greater(1, 5) // false
                    ```
            .panel.panel-default
              a(name='greaterEq')
              .panel-heading
                h4 greaterEq
                  small: code is.greaterEq(a, b)
                small alias 
                  code is.gtEq(a, b)

              .panel-body
                :markdown
                  Returns true if `a > b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.greaterEq(5, 1) // true
                    is.greaterEq(5, 5) // true
                    is.greaterEq(1, 5) // false
                    ```
            .panel.panel-default
              a(name='object')
              .panel-heading
                h4 object
                  small: code is.object(val)

              .panel-body
                :markdown
                  Returns true if `val` is an object
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.object({}) // true
                    is.object([]) // true
                    is.object(1) // false
                    ```
            .panel.panel-default
              a(name='array')
              .panel-heading
                h4 array
                  small: code is.array(val)

              .panel-body
                :markdown
                  Returns true if `val` is an array

                  *Defaults to native* `Array.isArray`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.array([]) // true
                    is.array({}) // false
                    is.array(1) // false
                    ```
            .panel.panel-default
              a(name='date')
              .panel-heading
                h4 date
                  small: code is.date(val)

              .panel-body
                :markdown
                  Returns true if `val` is a date
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.date(new Date()) // true
                    is.date({}) // false
                    is.date(1) // false
                    ```
            .panel.panel-default
              a(name='rgx')
              .panel-heading
                h4 rgx
                  small: code is.rgx(val)
                small alias 
                  code is.RegExp(val)

              .panel-body
                :markdown
                  Returns true if `val` is a rgx
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.rgx(/\d{1,4}/) // true
                    is.rgx(new RegExp("Cosmos", "gi")) // true
                    is.rgx({}) // false
                    is.rgx("Dark Star") // false
                    ```
            .panel.panel-default
              a(name='finite')
              .panel-heading
                h4 finite
                  small: code is.finite(val)

              .panel-body
                :markdown
                  Returns true if `val` is a `number` and `isFinite`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.finite(1) // true
                    is.finite(2e64) // true
                    is.finite(NaN) // false
                    is.finite('1') // false
                    is.finite(Infinity) // false
                    ```
            .panel.panel-default
              a(name='NaN')
              .panel-heading
                h4 NaN
                  small: code is.NaN(val)

              .panel-body
                :markdown
                  Returns true if `val` is `NaN`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.NaN(NaN) // true
                    is.NaN("titan") // false
                    is.NaN(1) // false
                    ```
            .panel.panel-default
              a(name='arguments')
              .panel-heading
                h4 arguments
                  small: code is.arguments(val)

              .panel-body
                :markdown
                  Returns true if `val` is an `arguments` object
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.arguments(arguments) // true
                    is.arguments("titan") // false
                    ```
            .panel.panel-default
              a(name='error')
              .panel-heading
                h4 error
                  small: code is.error(val)

              .panel-body
                :markdown
                  Returns true if `val` is an `error` object
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.error(new Error()) // true
                    is.error("titan") // false
                    ```
            .panel.panel-default
              a(name='fn')
              .panel-heading
                h4 fn
                  small: code is.fn(val)
                small alias 
                  code is.function(val)

              .panel-body
                :markdown
                  Returns true if `typeof val === 'function'`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.fn(is.fn) // true
                    is.fn(Math.max) // true
                    is.fn({}) // false
                    is.fn("Dark Star") // false
                    ```
            .panel.panel-default
              a(name='num')
              .panel-heading
                h4 num
                  small: code is.num(val)
                small alias 
                  code is.number(val)

              .panel-body
                :markdown
                  Returns true if `typeof val === 'number'`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.num(1) // true
                    is.num(NaN) // true
                    is.num({}) // false
                    is.num("Dark Star") // false
                    ```
            .panel.panel-default
              a(name='str')
              .panel-heading
                h4 str
                  small: code is.str(val)
                small alias 
                  code is.string(val)

              .panel-body
                :markdown
                  Returns true if `typeof val === 'string'`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.str("Dark Star") // true
                    is.str(1) // false
                    is.str({}) // false
                    ```
            .panel.panel-default
              a(name='bool')
              .panel-heading
                h4 bool
                  small: code is.bool(val)
                small alias 
                  code is.boolean(val)

              .panel-body
                :markdown
                  Returns true if `typeof val === 'boolean'`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.bool(true) // false
                    is.bool(false) // false
                    is.bool("Dark Star") // false
                    is.bool(1) // false
                    ```
            .panel.panel-default
              a(name='int')
              .panel-heading
                h4 int
                  small: code is.int(val)

              .panel-body
                :markdown
                  Returns true if `val` is an integer
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.int(1) // true
                    is.int(1.5) // false
                    ```
            .panel.panel-default
              a(name='pos')
              .panel-heading
                h4 pos
                  small: code is.pos(val)

              .panel-body
                :markdown
                  Returns true if `val > 0` and is a `number`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.pos(1) // true
                    is.pos(-2) // false
                    is.pos(0) // false
                    ```
            .panel.panel-default
              a(name='neg')
              .panel-heading
                h4 neg
                  small: code is.neg(val)

              .panel-body
                :markdown
                  Returns true if `val < 0` and is a `number`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.neg(-2) // true
                    is.neg(1) // false
                    is.neg(0) // false
                    ```
            .panel.panel-default
              a(name='zero')
              .panel-heading
                h4 zero
                  small: code is.zero(val)

              .panel-body
                :markdown
                  Returns true if `val === 0` and is a `number`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    is.zero(0) // true
                    is.zero(-2) // false
                    is.zero(1) // false
                    ```
            .panel.panel-default
              a(name='contains')
              .panel-heading
                h4 contains
                  small: code is.contains(arr, val)

              .panel-body
                :markdown
                  Returns true if `val` exists in `arr`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    var arr = [1, 2, 3, 4];
                    is.contains(arr, 2) // true
                    is.contains(arr, -5) // false
                    ```
            .panel.panel-default
              a(name='has')
              .panel-heading
                h4 has
                  small: code is.has(o, key)

              .panel-body
                :markdown
                  Returns true if `string` `key` exists on `object` `o`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    var o = { planet: 'Earth' };
                    is.has(o, 'planet') // true
                    is.has(o, 'moon') // false
                    ```
            .panel.panel-default
              a(name='instance')
              .panel-heading
                h4 instance
                  small: code is.instance(Cls, [inst])

              .panel-body
                :markdown
                  Returns a **predicate** that evaluates `instanceof` against a given object.
                  Returns true if `inst instanceof Cls` is `true`.
                hr
                p
                  small Example
                  :markdown
                    ```js
                    function Planet() {}
                    var p = new Planet();

                    var isPlanet = is.instance(Planet);
                    isPlanet(p); // true
                    is.instance(Planet, p); // true
                    ```
            .panel.panel-default
              a(name='ternary')
              .panel-heading
                h4 ternary
                  small: code is.ternary(pred, [a [b]])

              .panel-body
                :markdown
                  **If a `pred` is given:**

                  Returns a `function(a, b)` that evaluates `pred(a, b)`
                  
                  **If `pred` and `a` and is given:**

                  Returns a `function(b)` that evaluates `pred(a, b)`

                  **If `pred` and `a` and `b` is given:**

                  Returns the evaluation of `pred(a, b)`

                  **If `pred` is of type `boolean`, `a`, and `b` are given**

                  Returns `bool` ? `a` : `b`
                hr
                p
                  small Example
                  :markdown
                    ```js
                    var pred1 = is.ternary(is.less);
                    pred1(1, 2); // 1

                    var pred2 = is.ternary(is.less, 1);
                    pred2(2); // 1

                    is.ternary(is.less, 1, 2); // 1
                    is.ternary(1 < 2, 'a', 'b'); // 'a'
                    ```
            .panel.panel-default
              a(name='every')
              .panel-heading
                h4 every
                  small: code is.every()
                small alias 
                  code is.all()

              .panel-body
                :markdown
                  Returns a chainable interface for lazily executing predicates.

                  Invoke `.val()` which returns `true` if all predicates evaluate
                  to `true`.
                hr
                p
                  small Example
                  :markdown
                    ```js
                    var chain = is.every();
                    chain = chain.less(1, 2).fn(is.exists);
                    chain.val(); // true
                    chain.NaN(1).val(); // false

                    is.every().exists('mars').str('asteroid').val(); //true
                    ```
            .panel.panel-default
              a(name='some')
              .panel-heading
                h4 some
                  small: code is.some()
                small alias 
                  code is.any()

              .panel-body
                :markdown
                  Returns a chainable interface for lazily executing predicates.

                  Invoke `.val()` which returns `true` if at least 1 predicate evaluate
                  to `true`.
                hr
                p
                  small Example
                  :markdown
                    ```js
                    var chain = is.some();
                    chain = chain.equal(1, 2).fn(is.exists);
                    chain.val(); // true
                    chain.NaN(1).val(); // true

                    is.some().exists(null).str('asteroid').val(); // true
                    is.some().exists(null).str(1).val(); // false
                    ```
            hr
            #footer.well
              | Copyright &copy 2013-2014&nbsp;
              a(href='http://trevorlandau.net') Trevor Landau

      #push
      script(src='http://ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js')
      script(src='http://netdna.bootstrapcdn.com/bootstrap/3.0.2/js/bootstrap.min.js')
      script.
        $(document).ready(function() {
          $('[data-toggle=offcanvas]').click(function() {
            $('.row-offcanvas').toggleClass('active');
          });

          $('.btn-toggle').click(function() {
            $(this).find('.btn').toggleClass('active').toggleClass('btn-default').toggleClass('btn-primary');
          });
        });


